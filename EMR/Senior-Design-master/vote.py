import datetime

def HardClassify(text):
        # A simple example of the conversation
        # This information will be pass by the speech recognize API( text[i] = marker + r.recognize_google(audio[i]) )
        # Note: recognize result from Google Speech API does not include any punctuation
        """
            text = []
            text.append("")
            text[0] = "[D] Hello Mr Potter could you please talk something about yourself"
            text.append("")
            text[1] = "[P] Hello Dr Ingham I am Harry Potter a student 21 years old 170 centimeters height 65 kilograms weight Currently catched a cold"
            text.append("")
            text[2] = "[D] What are the symptoms that trouble you Specifically"
            text.append("")
            text[3] = "[P] I have been coughing for half a week and have been running a fever"
            text.append("")
            text[4] = "[D] I see and do you allergy to any kind of medicine"
            text.append("")
            text[5] = "[P] Might be Penicillins my former doctor told me don't use that"
            
            """
        # A sample keyword database
        # The actual database should be generated by SQL or a Spider
        keywordindex = ["Name", "Information", "History", "Billing", "Symptoms", "Allergy", "Family", "Organ","Be","Medicine"]
        keywordcategory = []
        keywordcategory.append("")
        #Name
        keywordcategory[0] = {"am","I'm"}
        keywordcategory.append("")
        #Information
        keywordcategory[1] = {"centimeter","centimeters","meter","meters","inch","inchs","worker", "student" , "teacher", "professor"}
        keywordcategory.append("")
        #Time
        keywordcategory[2] = {"days","day","weeks","week","year","years","month","months","recent","recently","current","time"}
        keywordcategory.append("")
        #Billing
        keywordcategory[3] = {"worker", "student" , "teacher", "professor"}
        keywordcategory.append("")
        #Symptoms
        keywordcategory[4] = {"cough", "coughed", "coughing", "fever", "ache", "itch","headache","temperature","worn"}
        keywordcategory.append("")
        #Allergy
        keywordcategory[5] = {"penicillins" , "aspirins"}
        keywordcategory.append("")
        #Family
        keywordcategory[6] = {"father" , "mother", "dad", "mom", "grandpa", "grandma", "son", "daugher", "sister", "brother", "cousin", "wife", "husband"}
        keywordcategory.append("")
        #Organ
        keywordcategory[7] = {"head","eye","eyes","nose","ear","ears","mouth","leg","legs","heart","arm","arms","lung","lungs"}
        keywordcategory.append("")
        #Be
        keywordcategory[8] = {"is","am","are","was","were","be"}
        keywordcategory.append("")

        #Medicine

        keywordcategory[9] = {"antibiotic"}

        # Splitting the text, and make the text not sensitive to the upper/lower cases
        textsplit = []
        print(text)
        textsplit = text.split()
            #for i in range (0, len(text)):
            #text[i] = text[i].lower()
            #textsplit.append(text[i].split())
        #print (textsplit[i])
        
        # Analyzing the text (Keyword Comparing)
        record = []
        for k in range (0, len(keywordcategory)):
            record.append([])


        cateLookUp = {"Name":0, "Information": 1, "Time":2 , "Billing": 3, \
                    "Symptoms": 4, "Allergy": 5, "Family":6, "Organ":7,"Be":8,"Medicine":9}
        tag = []
        Detected = [0,0,0,0,0,0,0,0,0,0]
        for o in range(0,len(textsplit)):
            tag.append(0)

        for j in range (0, len(textsplit)):
            for k in range (0, len(keywordcategory)):
                if textsplit[j] in keywordcategory[k] :
                            Detected[k] = 1
                            tag[j] = k
                            record[k].append(textsplit[j])
                            if k == 4 :
                                print("symptom detected")
                                #record[k].append(textsplit[j])
                                if k == 0 :
                                    print("name detected")
                                    #record[k].append(textsplit[j+1])
                            if k == 1 or k == 2:
                                print("time detect")
                                #record[k].append(textsplit[j-1])

        #Decision Tree Network

        # Symptom layer, detect symptoms
        if (len(record[cateLookUp['Symptoms']]) > 0):
            # Family Layer, detect family members
            if (len(record[cateLookUp['Family']]) > 0):
                # Report Family history
                VoteD = 'Family_History'
                print('Report Family history')
                print(record[cateLookUp['Family']][0] + " : " + record[cateLookUp['Symptoms']][0])
            # Time Layer, detect Time information
            elif (len(record[cateLookUp['Time']]) > 0):
                # Long period
                if ("year" in record[cateLookUp['Time']] \
                    or "years" in record[cateLookUp['Time']]):
                    # Report Problem list
                    VoteD = 'Problem_List'
                    print('Report Problem list')
                    print(record[cateLookUp['Symptoms']])

                else: 
                    # Report History of present illness
                    VoteD = 'HPI'
                    print('Report HPI')
                    print(record[cateLookUp['Symptoms']][0] + " for " + record[cateLookUp['Time']][0])
            else: 
                # Report Problem list
                VoteD = 'Problem_List'
                print('Report Problem list')
                print(record[cateLookUp['Symptoms']])


        # No symptom found, detect organ
        elif (len(record[cateLookUp['Organ']]) > 0): 
            # Report phycial Exam
            VoteD = 'Physical_Exam'
            print('Report physical Exam')
            print(text)

        # No organ found, check for special set
        else: 
            VoteD = 'Special_Sets'
            print('Enter special sets')
                        #End the Conversation
            if (("all" in textsplit) and ("bye" in textsplit)):
                    print("Conversation End")
                    exit(0)

            if (("questions" in textsplit) and ("yes" in textsplit) and ("no" in textsplit)):
                    negatives_flag = 1








        #Naive Fixed Bayes


        #Currently four kinds of outputs enabled.



        cateLookUp = {"Name":0, "Information": 1, "Time":2 , "Billing": 3, \
                    "Symptoms": 4, "Allergy": 5, "Family":6, "Organ":7,"Be":8,"Medicine":9}
        ResultLookUp = ["Family_History", "Problem_List","Physical_Exam","HPI"]
        ResultProbB = [1.,1.,1.,1.]
        BayesTable = [[0.4,0.2,0.5,0.5,1.0,0.5,1.5,0.5,0.5,0.5], \
                      [0.7,0.2,0.5,0.5,1.0,0.5,0.1,0.5,0.5,0.2], \
                      [0.2,0.2,0.2,0.2,0.2,0.1,0.1,2.0,0.7,0.1], \
                      [0.5,0.2,1.0,0.5,1.2,0.2,0.2,0.7,0.5,0.4]]




        for i in range(0,len(ResultProbB)) :
            for j in range(0,len(BayesTable[i])) :
                if Detected[j] == 1:
                    ResultProbB[i] = ResultProbB[i] * BayesTable[i][j]
                else:
                    ResultProbB[i] = ResultProbB[i] * 0.5
        print("The result of Bayes Table:")
        largest = 0
        largestindex = 0
        for i in range(0,len(ResultProbB)) :
            print(ResultProbB[i])
            if ResultProbB[i] > largest:
                largest = ResultProbB[i]
                largestindex = i
        print(ResultLookUp[largestindex])

        VoteB = ResultLookUp[largestindex]
        print("vote result")
        print(VoteB,VoteD)

        if VoteB == VoteD :
            print("Quite sure about the classify result, generating training data")
            currenttime = datetime.datetime.now()
            currenttime = ''.join(["Date:",str(currenttime)])
            filename = ''.join([currenttime,".txt"])
            fullfilename = ''.join([VoteB,"/",filename])
            trainingfile = open(fullfilename,"w")
            trainingfile.write(text)
            trainingfile.close



            #Output the extracting results
        for i in range (0, len(keywordcategory)):
            print (keywordindex[i])
            print (record[i])
        return VoteB,VoteD



print(Hard_Classify("I have been running a temperature, and feel worn down"))
print(Hard_Classify("I am going to prescribe you an antibiotic to take three times a day for the next two weeks"))

'''
Keyword("My dad has been coughing for years")
Keyword("I have been running a temperature, and feel worn down")
Keyword("Thanks for taking the time to fit me into your schedule today.  I really appreciate it.")
Keyword("I am going to prescribe you an antibiotic to take three times a day for the next two weeks")
'''