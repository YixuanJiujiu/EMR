#Bayes Network
def BayesNetwork(text):
        # A simple example of the conversation
        # This information will be pass by the speech recognize API( text[i] = marker + r.recognize_google(audio[i]) )
        # Note: recognize result from Google Speech API does not include any punctuation
        """
            text = []
            text.append("")
            text[0] = "[D] Hello Mr Potter could you please talk something about yourself"
            text.append("")
            text[1] = "[P] Hello Dr Ingham I am Harry Potter a student 21 years old 170 centimeters height 65 kilograms weight Currently catched a cold"
            text.append("")
            text[2] = "[D] What are the symptoms that trouble you Specifically"
            text.append("")
            text[3] = "[P] I have been coughing for half a week and have been running a fever"
            text.append("")
            text[4] = "[D] I see and do you allergy to any kind of medicine"
            text.append("")
            text[5] = "[P] Might be Penicillins my former doctor told me don't use that"
            
            """
        # A sample keyword database
        # The actual database should be generated by SQL or a Spider
        keywordindex = ["Name", "Information", "History", "Billing", "Symptoms", "Allergy", "Family", "Organ","Be"]
        keywordcategory = []
        keywordcategory.append("")
        #Name
        keywordcategory[0] = {"am","I'm"}
        keywordcategory.append("")
        #Information
        keywordcategory[1] = {"centimeter","centimeters","meter","meters","inch","inchs","worker", "student" , "teacher", "professor"}
        keywordcategory.append("")
        #History
        keywordcategory[2] = {"days","day","weeks","week","year","years","month","months","recent","recently","current","time"}
        keywordcategory.append("")
        #Billing
        keywordcategory[3] = {"worker", "student" , "teacher", "professor"}
        keywordcategory.append("")
        #Symptoms
        keywordcategory[4] = {"cough", "coughed", "coughing", "fever", "ache", "itch"}
        keywordcategory.append("")
        #Allergy
        keywordcategory[5] = {"penicillins" , "aspirins"}
        keywordcategory.append("")
        #Family
        keywordcategory[6] = {"father" , "mother", "dad", "mom", "grandpa", "grandma", "son", "daugher", "sister", "brother", "cousin", "wife", "husband"}
        keywordcategory.append("")
        #Organ
        keywordcategory[7] = {"head","eye","eyes","nose","ear","ears","mouth","leg","legs","heart","arm","arms","lung","lungs"}
        keywordcategory.append("")
        #Be
        keywordcategory[8] = {"is","am","are","was","were","be"}

        # Splitting the text, and make the text not sensitive to the upper/lower cases
        textsplit = []
        print(text)
        textsplit = text.split()
            #for i in range (0, len(text)):
            #text[i] = text[i].lower()
            #textsplit.append(text[i].split())
        #print (textsplit[i])
        
        # Analyzing the text (Keyword Comparing)
        record = []
        for k in range (0, len(keywordcategory)):
            record.append([])


        cateLookUp = {"Name":0, "Information": 1, "History":2 , "Billing": 3, "Symptoms": 4, "Allergy": 5, "Family":6, "Organ":7,"Be":8}


#for i in range (0, len(textsplit)):
#           for j in range (0, len(textsplit[i])):
        for j in range (0, len(textsplit)):
                for k in range (0, len(keywordcategory)):
                    if textsplit[j] in keywordcategory[k] :
                        if k >= 3 :
                            print("symptom detected")
                            record[k].append(textsplit[j])
                            if k == 0 :
                                record[k].append(textsplit[j+1])
                        if k == 1 or k == 2:
                            record[k].append(textsplit[j-1])


#Bayes Network

		# Symptom layer, detect symptoms
		if (len(record[cateLookUp['Symptoms']]>0)):

			# Family Layer, detect family members
			if (len(record[cateLookUp['Family']]) > 0):
		    # Report Family history
		    	print("0")

			# Time Layer, detect Time information
			elif (len(record[cateLookUp['Time']]) > 0):
				# Long period
				if ("year" in record[cateLookUp['Time']] \
					or "years" in record[cateLookUp['Time']]):
					# Report Problem list

				else: 
					# Report History of present illness

			else: 
				# Report Problem list

		# No symptom found, detect organ
		elif (len(record[cateLookUp['Organ']]) > 0): 
			# Report phycial Exam

		# No organ found, check for special set
		else: 

		        #Output the extracting results






        #Output the extracting results


        for i in range (0, len(keywordcategory)):
            print (keywordindex[i])
            print (record[i])
        return 1